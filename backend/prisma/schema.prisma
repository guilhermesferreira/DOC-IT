generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  devices   Device[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  mfaSecret         String?  
  isMfaEnabled      Boolean  @default(false)
  // Futuro: mfaRecoveryCodes String[] // Para códigos de recuperação 
}

model Device {
  id          Int      @id @default(autoincrement())
  name        String
  type        String
  location    String
  patrimony   String?
  userId      Int?      // User who owns/manages this device, or who approved it. Optional because agent devices are unowned until approved.
  user        User?     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Fields for agent-discovered devices
  agentId          String?   @unique // UUID from agent
  hostname         String?   // Can be same as 'name' for agent devices
  osUsername       String?
  ipAddress        String?
  agentVersion     String?
  osInfo           String?
  additionalData   Json?

  // Status and tracking
  status           String    @default("pending") // "pending", "approved", "rejected", "archived"
                                                // Manually added devices can be set to "approved" directly.
  source           String    @default("manual")  // "manual", "agent"
  firstSeenAt      DateTime? // For agent-discovered devices
  lastSeenAt       DateTime? // For agent pings, or general last known activity
  approvedAt       DateTime? // When status changed to "approved"

  @@index([status])
  @@index([hostname])
  @@index([userId])
  @@index([agentId])
  @@index([source])
}
